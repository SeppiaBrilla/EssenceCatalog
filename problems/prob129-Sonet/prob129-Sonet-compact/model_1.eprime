language ESSENCE' 1.0

given nnodes: int(1..)
given nrings: int(1..)
given capacity: int(1..)
given p1: int
given demand_Explicit_Occurrence:
        matrix indexed by [int(1..p1), int(1..nnodes)] of bool
find network_ExplicitVarSizeWithFlags_Flags:
        matrix indexed by [int(1..nrings)] of int(0..min([nrings,
                                                          2 ** (1 + (nnodes - 1)); int(1..2)]))
find network_ExplicitVarSizeWithFlags_Values_Occurrence:
        matrix indexed by [int(1..nrings), int(1..nnodes)] of bool
minimising
    sum([(network_ExplicitVarSizeWithFlags_Flags[q3] > 0) *
         sum([network_ExplicitVarSizeWithFlags_Values_Occurrence[q3, q6]
                  | q6 : int(1..nnodes)])
             | q3 : int(1..nrings)])
such that
    and([or([network_ExplicitVarSizeWithFlags_Flags[q5] > 0 /\
             and([network_ExplicitVarSizeWithFlags_Values_Occurrence[q5, q7]
                      | q7 : int(1..nnodes), demand_Explicit_Occurrence[q4, q7]])
                 | q5 : int(1..nrings)])
             | q4 : int(1..p1)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q1 + 1] > 0 ->
         network_ExplicitVarSizeWithFlags_Values_Occurrence[q1, ..] <lex
         network_ExplicitVarSizeWithFlags_Values_Occurrence[q1 + 1, ..]
             | q1 : int(1..nrings - 1)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q1] = 0 ->
         and([network_ExplicitVarSizeWithFlags_Values_Occurrence[q1, q8] = false
                  | q8 : int(1..nnodes)])
             | q1 : int(1..nrings)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q1 + 1] > 0 ->
         network_ExplicitVarSizeWithFlags_Flags[q1] > 0
             | q1 : int(1..nrings - 1)]),
    nrings =
    sum([network_ExplicitVarSizeWithFlags_Flags[q1] | q1 : int(1..nrings)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q1] > 0 ->
         sum([network_ExplicitVarSizeWithFlags_Values_Occurrence[q1, q2]
                  | q2 : int(1..nnodes)])
         <= capacity
             | q1 : int(1..nrings)])

