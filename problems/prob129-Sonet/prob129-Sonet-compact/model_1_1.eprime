language ESSENCE' 1.0

given nnodes: int(1..)
given nrings: int(1..)
given capacity: int(1..)
given fin1: int
given demand_Explicit_Occurrence:
        matrix indexed by [int(1..fin1), int(1..nnodes)] of bool
find network_ExplicitVarSizeWithFlags_Flags:
        matrix indexed by [int(1..nrings)] of int(0..nrings)
find network_ExplicitVarSizeWithFlags_Values_Occurrence:
        matrix indexed by [int(1..nrings), int(1..nnodes)] of bool
minimising
    sum([(network_ExplicitVarSizeWithFlags_Flags[q8] > 0) *
         sum([network_ExplicitVarSizeWithFlags_Values_Occurrence[q8, q11]
                  | q11 : int(1..nnodes)])
             | q8 : int(1..nrings)])
such that
    and([or([network_ExplicitVarSizeWithFlags_Flags[q10] > 0 /\
             and([network_ExplicitVarSizeWithFlags_Values_Occurrence[q10, q12]
                      | q12 : int(1..nnodes), demand_Explicit_Occurrence[q9, q12]])
                 | q10 : int(1..nrings)])
             | q9 : int(1..fin1)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q1 + 1] > 0 ->
         network_ExplicitVarSizeWithFlags_Values_Occurrence[q1, ..] <lex
         network_ExplicitVarSizeWithFlags_Values_Occurrence[q1 + 1, ..]
             | q1 : int(1..nrings - 1)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q2] = 0 ->
         and([network_ExplicitVarSizeWithFlags_Values_Occurrence[q2, q13] = false
                  | q13 : int(1..nnodes)])
             | q2 : int(1..nrings)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q3 + 1] > 0 ->
         network_ExplicitVarSizeWithFlags_Flags[q3] > 0
             | q3 : int(1..nrings - 1)]),
    nrings =
    sum([network_ExplicitVarSizeWithFlags_Flags[q5] | q5 : int(1..nrings)]),
    and([network_ExplicitVarSizeWithFlags_Flags[q6] > 0 ->
         sum([network_ExplicitVarSizeWithFlags_Values_Occurrence[q6, q7]
                  | q7 : int(1..nnodes)])
         <= capacity
             | q6 : int(1..nrings)])

