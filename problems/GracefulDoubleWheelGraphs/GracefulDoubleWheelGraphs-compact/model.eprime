language ESSENCE' 1.0

given n: int(1..)
letting C be 2 * n
letting q1 be 2 * n
letting q2 be 4 * n
find colouring_Function1D: matrix indexed by [int(0..q1)] of int(0..q2)
letting q3 be 4 * n - 1
letting q4 be 4 * n
find edgeID_Function1D: matrix indexed by [int(0..q3)] of int(0..q4)
such that
    and([edgeID_Function1D[v] =
         |colouring_Function1D[v] - colouring_Function1D[(v + 1) % n]|
             | v : int(0..n - 1)]),
    and([edgeID_Function1D[v] =
         |colouring_Function1D[v] - colouring_Function1D[(v + 1) % n + n]|
             | v : int(n..2 * n - 1)]),
    and([edgeID_Function1D[2 * n + v] =
         |colouring_Function1D[C] - colouring_Function1D[v]|
             | v : int(0..n - 1)]),
    and([edgeID_Function1D[2 * n + v] =
         |colouring_Function1D[C] - colouring_Function1D[v]|
             | v : int(n..2 * n - 1)]),
    allDiff(edgeID_Function1D),
    allDiff(colouring_Function1D)

