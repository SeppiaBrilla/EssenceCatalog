language ESSENCE' 1.0

given items_EnumSize: int
given fin1: int
given fin2: int
given fin3: int
given weight_Function1D:
        matrix indexed by [int(1..items_EnumSize)] of int(fin2..fin3)
given fin4: int
given fin5: int
given fin6: int
given gain_Function1D:
        matrix indexed by [int(1..items_EnumSize)] of int(fin5..fin6)
given capacity: int
find picked_ExplicitVarSizeWithDummy:
        matrix indexed by [int(1..1 + (items_EnumSize - 1))] of int(1..items_EnumSize +
                                                                       1)
maximising
    sum([toInt(picked_ExplicitVarSizeWithDummy[q5] != items_EnumSize + 1) *
         gain_Function1D[picked_ExplicitVarSizeWithDummy[q5]]
             | q5 : int(1..1 + (items_EnumSize - 1))])
such that
    sum([toInt(picked_ExplicitVarSizeWithDummy[q6] != items_EnumSize + 1) *
         weight_Function1D[picked_ExplicitVarSizeWithDummy[q6]]
             | q6 : int(1..1 + (items_EnumSize - 1))])
    <= capacity,
    and([picked_ExplicitVarSizeWithDummy[q1] <
         picked_ExplicitVarSizeWithDummy[q1 + 1]
         \/ picked_ExplicitVarSizeWithDummy[q1] = items_EnumSize + 1
             | q1 : int(1..1 + (items_EnumSize - 1) - 1)]),
    and([picked_ExplicitVarSizeWithDummy[q2] = items_EnumSize + 1 ->
         picked_ExplicitVarSizeWithDummy[q2 + 1] = items_EnumSize + 1
             | q2 : int(1..1 + (items_EnumSize - 1) - 1)])

