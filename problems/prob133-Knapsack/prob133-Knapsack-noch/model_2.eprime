language ESSENCE' 1.0

given items_EnumSize: int
given fin1: int
given fin2: int
given fin3: int
given weight_Function1D:
        matrix indexed by [int(1..items_EnumSize)] of int(fin2..fin3)
given fin4: int
given fin5: int
given fin6: int
given gain_Function1D:
        matrix indexed by [int(1..items_EnumSize)] of int(fin5..fin6)
given capacity: int
find picked_ExplicitVarSizeWithMarker_Marker: int(0..1 + (items_EnumSize - 1))
find picked_ExplicitVarSizeWithMarker_Values:
        matrix indexed by [int(1..1 + (items_EnumSize - 1))] of int(1..items_EnumSize)
maximising
    sum([(q4 <= picked_ExplicitVarSizeWithMarker_Marker) *
         gain_Function1D[picked_ExplicitVarSizeWithMarker_Values[q4]]
             | q4 : int(1..1 + (items_EnumSize - 1))])
such that
    sum([(q5 <= picked_ExplicitVarSizeWithMarker_Marker) *
         weight_Function1D[picked_ExplicitVarSizeWithMarker_Values[q5]]
             | q5 : int(1..1 + (items_EnumSize - 1))])
    <= capacity,
    and([q1 + 1 <= picked_ExplicitVarSizeWithMarker_Marker ->
         picked_ExplicitVarSizeWithMarker_Values[q1] <
         picked_ExplicitVarSizeWithMarker_Values[q1 + 1]
             | q1 : int(1..1 + (items_EnumSize - 1) - 1)]),
    and([q2 > picked_ExplicitVarSizeWithMarker_Marker ->
         picked_ExplicitVarSizeWithMarker_Values[q2] = 1
             | q2 : int(1..1 + (items_EnumSize - 1))])

