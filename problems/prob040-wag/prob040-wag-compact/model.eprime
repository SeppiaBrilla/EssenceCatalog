language ESSENCE' 1.0

given numNodes: int(1..)
given numLeaves: int(1..)
given numPeriods: int(1..)
given maxStock: int(1..)
given holdingCost: matrix indexed by [int(1..numNodes)] of int(0..)
given procCost: matrix indexed by [int(1..numNodes)] of int(0..)
given demand:
        matrix indexed by [int(1..numLeaves), int(1..numPeriods)] of int(0..)
given children_Occurrence:
        matrix indexed by [int(1..numNodes), int(1..numNodes)] of bool
find orders:
        matrix indexed by [int(1..numNodes), int(1..numPeriods)] of int(0..maxStock)
find stock:
        matrix indexed by [int(1..numNodes), int(0..numPeriods)] of int(0..maxStock)
minimising
    sum([sum([holdingCost[i] * stock[i, t] + procCost[i] * (orders[i, t] > 0)
                  | i : int(1..numNodes)])
             | t : int(1..numPeriods)])
such that
    and([stock[i, 0] = 0 | i : int(1..numNodes)]),
    and([and([stock[i, t] =
              stock[i, t - 1] + orders[i, t] -
              sum([orders[m, t] | m : int(1..numNodes), children_Occurrence[i, m]])
                  | i : int(numLeaves + 1..numNodes)])
             | t : int(1..numPeriods)]),
    and([and([stock[i, t] = stock[i, t - 1] + orders[i, t] - demand[i, t]
                  | i : int(1..numLeaves)])
             | t : int(1..numPeriods)])

