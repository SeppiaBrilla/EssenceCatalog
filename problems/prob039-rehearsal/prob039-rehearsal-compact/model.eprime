language ESSENCE' 1.0

given n_pieces: int(1..)
given n_players: int(1..)
given fin1: int
given duration_Function1D: matrix indexed by [int(1..n_pieces)] of int(1..)
given fin2: int
given plays_in_RelationAsMatrix:
        matrix indexed by [int(1..n_players), int(1..n_pieces)] of bool
find order_Function1D: matrix indexed by [int(1..n_pieces)] of int(1..n_pieces)
find arrive_Function1D:
        matrix indexed by [int(1..n_players)] of int(1..n_pieces)
find leave_Function1D: matrix indexed by [int(1..n_players)] of int(1..n_pieces)
such that
    and([plays_in_RelationAsMatrix[p, arrive_Function1D[p]]
             | p : int(1..n_players)]),
    and([plays_in_RelationAsMatrix[p, leave_Function1D[p]]
             | p : int(1..n_players)]),
    and([and([plays_in_RelationAsMatrix[p, order_Function1D[i]] ->
              arrive_Function1D[p] <= i /\ leave_Function1D[p] >= i
                  | i : int(1..n_pieces)])
             | p : int(1..n_players)]),
    allDiff(order_Function1D),
    and([or([order_Function1D[q4] = q3 | q4 : int(1..n_pieces)])
             | q3 : int(1..n_pieces)])

