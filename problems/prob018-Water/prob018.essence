language Essence 1.3
$ prob018.essence: Water Bucket Problem
$ Problem details available at http://www.csplib.org/prob/prob018/

letting nBuckets be 3
letting totalWater be 8

$ Bucket: buckets are represented by identifiers between 1 and 3
$ Water: amounts of water are represented as integers between 0 and 8
letting Bucket be domain int(1..nBuckets),
        Water  be domain int(0..totalWater),
        State  be domain function (total) Bucket --> Water

letting start    be function (1 --> 8, 2 --> 0, 3 --> 0)
letting capacity be function (1 --> 8, 2 --> 5, 3 --> 3)

letting goal be function (1 --> 4, 2 --> 4, 3 --> 0)

find plan: function int(1..(total_water+1)**n_buckets) --> State

find plan_len: int(1..(total_water+1)**n_buckets)


minimising plan_len

such that

plan_len = |plan|, 

$the partial function 'plan' maps integers between 1 and |plan| to values, to
$ensure a correct sequence representation
forAll i : int(1..(total_water+1)**n_buckets) ,
    i <= plan_len .
    i in defined(plan),

$ no water lost
forAll s in range(plan) . (sum b : Bucket . s(b) )  = totalWater,

$ no water gained
forAll s in range(plan) .
    forAll b : Bucket .
        s(b) <= capacity(b),

$ start state
plan(1) = start,

$ goal
plan(|plan|) = goal,

$ only two buckets changes in each stage
forAll i : int(1..(total_water+1)**n_buckets) 
    , i <= plan_len .
     |plan(i) intersect plan(i+1)| = 1,

$ in state i+1, the 2 involved buckets containt the same total amount of water 
$ as in state i
forAll i : int(1..(total_water+1)**n_buckets) ,
    i <= plan_len-1 .
    (sum w in range(plan(i) - (plan(i) intersect plan(i+1))) . w) =
    (sum w in range(plan(i+1) - (plan(i) intersect plan(i+1))) . w)
