language ESSENCE' 1.0

given n: int(1..100)
given totalWeight: int(1..1000)
given weights_Function1DPartial_Flags: matrix indexed by [int(1..n)] of bool
given weights_Function1DPartial_Values:
        matrix indexed by [int(1..n)] of int(1..100)
given values_Function1DPartial_Flags: matrix indexed by [int(1..n)] of bool
given values_Function1DPartial_Values:
        matrix indexed by [int(1..n)] of int(1..100)
find picked_Occurrence: matrix indexed by [int(1..n)] of bool
maximising
    sum([picked_Occurrence[i] * values_Function1DPartial_Values[i] | i : int(1..n)])
such that
    and([picked_Occurrence[i] -> values_Function1DPartial_Flags[i]
             | i : int(1..n)]),
    sum([picked_Occurrence[i] * weights_Function1DPartial_Values[i]
             | i : int(1..n)])
    <= totalWeight,
    and([picked_Occurrence[i] -> weights_Function1DPartial_Flags[i]
             | i : int(1..n)]),
    1 <= sum([picked_Occurrence[q1] | q1 : int(1..n)]),
    sum([picked_Occurrence[q1] | q1 : int(1..n)]) <= n

