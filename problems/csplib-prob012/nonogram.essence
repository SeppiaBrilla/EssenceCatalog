language ESSENCE 1.3.0
$ black-and-white nonogram, see http://www.csplib.org/Problems/prob012/
$ specification by Andras Salamon
$ Licenced under CC-BY-4.0 : http://creativecommons.org/licenses/by/4.0/

given m,n : int(1..) $ m rows, n columns
letting vgrid be domain int(1..m)
letting hgrid be domain int(1..n)

$ constraint for each row/column is a sequence of integers indicating
$ sizes of all contiguous blocks of 1s, separated by at least one 0
given rowRules : matrix indexed by [vgrid] of sequence of hgrid
given colRules : matrix indexed by [hgrid] of sequence of vgrid

find gram : matrix indexed by [vgrid, hgrid] of bool $ T = filled

such that forAll x : hgrid .
  $ number of 1s implied by constraint should match number of 1s present
  (sum y : vgrid . toInt(gram[y,x])) = (sum (_,v) in colRules[x] . v)
  $ number of 0-to-1 transitions matches constraint
  /\ |colRules[x]| =
     sum([toInt(!gram[y-1,x] /\ gram[y,x]) | y : int(2..m)]) + toInt(gram[1,x])
    
such that forAll y : vgrid .
  $ number of 1s implied by constraint should match number of 1s present
  (sum x : hgrid . toInt(gram[y,x])) = (sum (_,v) in rowRules[y] . v)
  $ number of 0-to-1 transitions matches constraint
  /\ |rowRules[y]| =
     sum([toInt(!gram[y,x-1] /\ gram[y,x]) | x : int(2..n)]) + toInt(gram[y,1])

