language ESSENCE' 1.0

given n: int(1..)
letting C be 2 * n
letting let1 be 2 * n
letting let2 be 3 * n
find colour_Function1D: matrix indexed by [int(0..let1)] of int(0..let2)
letting let3 be 3 * n - 1
letting let4 be 3 * n
find edgeID_Function1D: matrix indexed by [int(0..let3)] of int(0..let4)
such that
    and([edgeID_Function1D[v] =
         |colour_Function1D[v] - colour_Function1D[(v + 1) % (2 * n)]|
             | v : int(0..2 * n - 1)]),
    and([edgeID_Function1D[v / 2 + 2 * n] =
         |colour_Function1D[C] - colour_Function1D[v]|
             | v : int(0..2 * n - 1), v % 2 = 0]),
    allDiff(edgeID_Function1D),
    allDiff(colour_Function1D)

