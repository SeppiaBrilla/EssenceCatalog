language ESSENCE' 1.0

given n_boats: int(1..)
given n_periods: int(1..)
given fin1: int
given fin2: int
given capacity_Function1D: matrix indexed by [int(1..n_boats)] of int(1..fin2)
given fin3: int
given fin4: int
given crew_Function1D: matrix indexed by [int(1..n_boats)] of int(1..fin4)
find hosts_Occurrence: matrix indexed by [int(1..n_boats)] of bool
find sched_ExplicitR9_Function1D:
        matrix indexed by [int(1..n_periods), int(1..n_boats)] of int(1..n_boats)
find aux1_Occurrence:
        matrix indexed by [int(1..n_periods), int(1..n_boats)] of bool
minimising sum([toInt(hosts_Occurrence[q20]) | q20 : int(1..n_boats)])
such that
    and([and([aux1_Occurrence[q6, sched_ExplicitR9_Function1D[q6, q12]]
                  | q12 : int(1..n_boats)])
             | q6 : int(1..n_periods)]),
    and([and([aux1_Occurrence[q6, q9] ->
              or([sched_ExplicitR9_Function1D[q6, q13] = q9 | q13 : int(1..n_boats)])
                  | q9 : int(1..n_boats)])
             | q6 : int(1..n_periods)]),
    and([and([aux1_Occurrence[q6, q8] -> hosts_Occurrence[q8]
                  | q8 : int(1..n_boats)])
             | q6 : int(1..n_periods)]),
    and([and([hosts_Occurrence[h] -> sched_ExplicitR9_Function1D[q16, h] = h
                  | h : int(1..n_boats)])
             | q16 : int(1..n_periods)]),
    and([and([hosts_Occurrence[h] ->
              sum([toInt(sched_ExplicitR9_Function1D[q17, q19] = h) * crew_Function1D[q19]
                       | q19 : int(1..n_boats)])
              <= capacity_Function1D[h]
                  | h : int(1..n_boats)])
             | q17 : int(1..n_periods)]),
    and([sum([toInt(sched_ExplicitR9_Function1D[q5, b1] =
                    sched_ExplicitR9_Function1D[q5, b2])
                  | q5 : int(1..n_periods)])
         <= 1
             | b1 : int(1..n_boats), b2 : int(1..n_boats), b1 < b2]),
    and([sched_ExplicitR9_Function1D[q2, ..] <lex
         sched_ExplicitR9_Function1D[q2 + 1, ..]
             | q2 : int(1..n_periods - 1)])

