language ESSENCE' 1.0

given n_boats: int(1..)
given n_periods: int(1..)
given fin1: int
given capacity_Function1D: matrix indexed by [int(1..n_boats)] of int(1..)
given fin2: int
given crew_Function1D: matrix indexed by [int(1..n_boats)] of int(1..)
find hosts_Occurrence: matrix indexed by [int(1..n_boats)] of bool
find sched_Explicit_Function1D:
        matrix indexed by [int(1..n_periods), int(1..n_boats)] of int(1..n_boats)
minimising sum([hosts_Occurrence[q9] | q9 : int(1..n_boats)])
find aux1_Occurrence:
        matrix indexed by [int(1..n_periods), int(1..n_boats)] of bool
such that
    and([and([aux1_Occurrence[q5, sched_Explicit_Function1D[q5, q15]]
                  | q15 : int(1..n_boats)])
             | q5 : int(1..n_periods)]),
    and([and([aux1_Occurrence[q5, q12] ->
              or([sched_Explicit_Function1D[q5, q16] = q12 | q16 : int(1..n_boats)])
                  | q12 : int(1..n_boats)])
             | q5 : int(1..n_periods)]),
    and([and([aux1_Occurrence[q5, q11] -> hosts_Occurrence[q11]
                  | q11 : int(1..n_boats)])
             | q5 : int(1..n_periods)]),
    and([and([hosts_Occurrence[h] -> sched_Explicit_Function1D[q6, h] = h
                  | h : int(1..n_boats)])
             | q6 : int(1..n_periods)]),
    and([and([hosts_Occurrence[h] ->
              sum([(sched_Explicit_Function1D[q7, q18] = h) * crew_Function1D[q18]
                       | q18 : int(1..n_boats)])
              <= capacity_Function1D[h]
                  | h : int(1..n_boats)])
             | q7 : int(1..n_periods)]),
    and([sum([sched_Explicit_Function1D[q8, b1] = sched_Explicit_Function1D[q8, b2]
                  | q8 : int(1..n_periods)])
         <= 1
             | b1 : int(1..n_boats), b2 : int(1..n_boats), b1 < b2]),
    and([sched_Explicit_Function1D[q2, ..] <lex
         sched_Explicit_Function1D[q2 + 1, ..]
             | q2 : int(1..n_periods - 1)])

