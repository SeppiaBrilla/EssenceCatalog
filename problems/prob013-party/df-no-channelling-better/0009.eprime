language ESSENCE' 1.0

given n_upper: int(1..100)
given n_boats: int(1..100)
given n_periods: int(1..100)
given capacity_Function1D:
        matrix indexed by [int(1..n_boats)] of int(1..n_upper)
given crew_Function1D: matrix indexed by [int(1..n_boats)] of int(1..n_upper)
find hosts_SetExplicitVarSizeWithMarker_tuple1: int(0..n_boats)
find hosts_SetExplicitVarSizeWithMarker_tuple2:
        matrix indexed by [int(1..n_boats)] of int(1..n_boats)
find sched_SetExplicit_Function1D:
        matrix indexed by [int(1..n_periods), int(1..n_boats)] of int(1..n_boats)
minimising hosts_SetExplicitVarSizeWithMarker_tuple1
such that
    forAll v__0 : int(1..n_periods - 1)
        . flatten(sched_SetExplicit_Function1D[v__0, ..])
          <lex
          flatten(sched_SetExplicit_Function1D[v__0 + 1, ..]),
    forAll v__0 : int(1..n_boats)
        . v__0 + 1 <= hosts_SetExplicitVarSizeWithMarker_tuple1
          ->
          hosts_SetExplicitVarSizeWithMarker_tuple2[v__0]
          <
          hosts_SetExplicitVarSizeWithMarker_tuple2[v__0 + 1],
    forAll v__0 : int(1..n_boats)
        . v__0 > hosts_SetExplicitVarSizeWithMarker_tuple1
          ->
          hosts_SetExplicitVarSizeWithMarker_tuple2[v__0] = 1,
    forAll v__0 : int(1..n_boats)
        . (forAll v__1 : int(1..n_boats)
               . v__0 != v__1
                 ->
                 (sum v__2 : int(1..n_periods)
                      . (forAll v__3 : int(1..n_boats)
                             . v__3 = v__0
                               ->
                               (forAll v__4 : int(1..n_boats)
                                    . v__4 = v__1
                                      ->
                                      sched_SetExplicit_Function1D[v__2, v__4]
                                      =
                                      sched_SetExplicit_Function1D[v__2, v__3])))
                 <=
                 1),
    forAll v__0 : int(1..n_periods)
        . (forAll v__1 : int(1..n_boats)
               . v__1 <= hosts_SetExplicitVarSizeWithMarker_tuple1
                 ->
                 (sum v__2 : int(1..n_boats)
                      . (forAll v__3 : int(1..n_boats)
                             . v__3 = v__2
                               ->
                               sched_SetExplicit_Function1D[v__0, v__3]
                               =
                               hosts_SetExplicitVarSizeWithMarker_tuple2[v__1])
                        *
                        crew_Function1D[v__2])
                 <=
                 capacity_Function1D[hosts_SetExplicitVarSizeWithMarker_tuple2[v__1]]),
    forAll v__0 : int(1..n_periods)
        . (forAll v__1 : int(1..n_boats)
               . v__1 <= hosts_SetExplicitVarSizeWithMarker_tuple1
                 ->
                 (forAll v__2 : int(1..n_boats)
                      . v__2 = hosts_SetExplicitVarSizeWithMarker_tuple2[v__1]
                        ->
                        sched_SetExplicit_Function1D[v__0, v__2]
                        =
                        hosts_SetExplicitVarSizeWithMarker_tuple2[v__1])),
    forAll v__0 : int(1..n_periods)
        . (forAll v__1 : int(1..n_boats)
               . (exists v__2 : int(1..n_boats)
                      . v__2 <= hosts_SetExplicitVarSizeWithMarker_tuple1
                        /\
                        hosts_SetExplicitVarSizeWithMarker_tuple2[v__2]
                        =
                        sched_SetExplicit_Function1D[v__0, v__1]))
