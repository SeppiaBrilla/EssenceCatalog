language ESSENCE' 1.0

given n: int(1..)
where n % 2 = 0
letting let1 be n / 2
find setA_Occurrence: matrix indexed by [int(1..n)] of bool
letting let2 be n / 2
find setB_Explicit: matrix indexed by [int(1..let2)] of int(1..n)
such that
    sum(flatten([[setA_Occurrence[q6] | q6 : int(1..n)],
                 [!setA_Occurrence[setB_Explicit[q7]] | q7 : int(1..let2)]; int(1..2)]))
    = n,
    sum([setA_Occurrence[q8] /\ or([setB_Explicit[q10] = q8 | q10 : int(1..let2)])
             | q8 : int(1..n)])
    = 0,
    sum([setA_Occurrence[i] * i | i : int(1..n)]) =
    sum([setB_Explicit[q4] | q4 : int(1..let2)]),
    sum([setA_Occurrence[i] * (i * i) | i : int(1..n)]) =
    sum([setB_Explicit[q5] * setB_Explicit[q5] | q5 : int(1..let2)]),
    let1 = sum([setA_Occurrence[q1] | q1 : int(1..n)]),
    and([setB_Explicit[q2] < setB_Explicit[q2 + 1] | q2 : int(1..let2 - 1)])

