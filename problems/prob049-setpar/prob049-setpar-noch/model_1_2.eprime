language ESSENCE' 1.0

given n: int(1..)
where n % 2 = 0
letting q1 be n / 2
find setA_Occurrence: matrix indexed by [int(1..n)] of bool
letting q2 be n / 2
find setB_Explicit: matrix indexed by [int(1..q2)] of int(1..n)
such that
    sum(flatten([[setA_Occurrence[q7] | q7 : int(1..n)],
                 [!setA_Occurrence[setB_Explicit[q8]] | q8 : int(1..q2)]; int(1..2)]))
    = n,
    sum([setA_Occurrence[q9] /\ or([setB_Explicit[q11] = q9 | q11 : int(1..q2)])
             | q9 : int(1..n)])
    = 0,
    sum([setA_Occurrence[i] * i | i : int(1..n)]) =
    sum([setB_Explicit[q5] | q5 : int(1..q2)]),
    sum([setA_Occurrence[i] * (i * i) | i : int(1..n)]) =
    sum([setB_Explicit[q6] * setB_Explicit[q6] | q6 : int(1..q2)]),
    q1 = sum([setA_Occurrence[q3] | q3 : int(1..n)]),
    and([setB_Explicit[q4] < setB_Explicit[q4 + 1] | q4 : int(1..q2 - 1)])

