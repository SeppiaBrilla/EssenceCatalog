language ESSENCE' 1.0

given n: int(1..)
where n % 2 = 0
letting let1 be n / 2
find setA_Explicit: matrix indexed by [int(1..let1)] of int(1..n)
letting let2 be n / 2
find setB_Explicit: matrix indexed by [int(1..let2)] of int(1..n)
such that
    sum(flatten([[1 | q10 : int(1..let1)],
                 [!or([setA_Explicit[q13] = setB_Explicit[q11] | q13 : int(1..let1)])
                      | q11 : int(1..let2)]; int(1..2)]))
    = n,
    sum([or([setB_Explicit[q17] = setA_Explicit[q15] | q17 : int(1..let2)])
             | q15 : int(1..let1)])
    = 0,
    sum([setA_Explicit[q5] | q5 : int(1..let1)]) =
    sum([setB_Explicit[q6] | q6 : int(1..let2)]),
    sum([setA_Explicit[q7] * setA_Explicit[q7] | q7 : int(1..let1)]) =
    sum([setB_Explicit[q8] * setB_Explicit[q8] | q8 : int(1..let2)]),
    and([setA_Explicit[q1] < setA_Explicit[q1 + 1] | q1 : int(1..let1 - 1)]),
    and([setB_Explicit[q3] < setB_Explicit[q3 + 1] | q3 : int(1..let2 - 1)])

