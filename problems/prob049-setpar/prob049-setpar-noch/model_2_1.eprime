language ESSENCE' 1.0

given n: int(1..)
where n % 2 = 0
letting let1 be n / 2
find setA_Explicit: matrix indexed by [int(1..let1)] of int(1..n)
letting let2 be n / 2
find setB_Occurrence: matrix indexed by [int(1..n)] of bool
such that
    sum(flatten([[1 | q7 : int(1..let1)],
                 [setB_Occurrence[q6] /\ !or([setA_Explicit[q9] = q6 | q9 : int(1..let1)])
                      | q6 : int(1..n)]; int(1..2)]))
    = n,
    sum([setB_Occurrence[setA_Explicit[q11]] | q11 : int(1..let1)]) = 0,
    sum([setA_Explicit[q4] | q4 : int(1..let1)]) =
    sum([setB_Occurrence[i] * i | i : int(1..n)]),
    sum([setA_Explicit[q5] * setA_Explicit[q5] | q5 : int(1..let1)]) =
    sum([setB_Occurrence[i] * (i * i) | i : int(1..n)]),
    and([setA_Explicit[q1] < setA_Explicit[q1 + 1] | q1 : int(1..let1 - 1)]),
    let2 = sum([setB_Occurrence[q3] | q3 : int(1..n)])

