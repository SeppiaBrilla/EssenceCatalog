language Essence 1.3

letting numDigits be 4
letting dimension be 9

letting blackCells be
    { (1,5)
    , (2,3), (2,7)
    , (3,2), (3,5), (3,8)
    , (4,5)
    , (5,1), (5,3), (5,4), (5,5), (5,6), (5,7), (5,9)
    , (6,5)
    , (7,2), (7,5), (7,8)
    , (8,3), (8,7)
    , (9,5)
    }

letting acrossClueCoords be
    { ( 1, 1, 1, 4)
    , ( 4, 1, 6, 9)
    , ( 7, 2, 1, 2)
    , ( 8, 2, 4, 6)
    , ( 9, 2, 8, 9)
    , (10, 3, 3, 4)
    , (11, 3, 6, 7)
    , (13, 4, 1, 4)
    , (15, 4, 6, 9)
    , (17, 6, 1, 4)
    , (20, 6, 6, 9)
    , (23, 7, 3, 4)
    , (24, 7, 6, 7)
    , (25, 8, 1, 2)
    , (27, 8, 4, 6)
    , (28, 8, 8, 9)
    , (29, 9, 1, 4)
    , (30, 9, 6, 9)
    }

letting downClueCoords be
    { ( 1, 1, 1, 4 )
    , ( 2, 2, 1, 2 )
    , ( 3, 4, 1, 4 )
    , ( 4, 6, 1, 4 )
    , ( 5, 8, 1, 2 )
    , ( 6, 9, 1, 4 )
    , (10, 3, 3, 4 )
    , (12, 7, 3, 4 )
    , (14, 2, 4, 6 )
    , (16, 8, 4, 6 )
    , (17, 1, 6, 9 )
    , (18, 3, 6, 7 )
    , (19, 4, 6, 9 )
    , (20, 6, 6, 9 )
    , (21, 7, 6, 7 )
    , (22, 9, 6, 9 )
    , (26, 2, 8, 9 )
    , (28, 8, 8, 9 )
    }



$ $ hints -- across
$ such that
$     across[ 1] = across[27] * 2,                $  1: 27 across times two
$     across[ 4] = down[4] + 71,                  $  4: 4 down plus seventy-one
$     across[ 7] = down[18] + 4,                  $  7: 18 down plus four
$     across[ 8] = down[6] / 16,                  $  8: 6 down divided by sixteen
$     across[ 9] = down[2] - 18,                  $  9: 2 down minus eighteen
$     across[10] = 6 * 144 / 12,                  $ 10: Dozen in six gross
$     across[11] = down[5] - 70,                  $ 11: 5 down minus seventy
$     across[13] = down[26] * across[23],         $ 13: 26 down times 23 across
$     across[15] = down[6] - 350,                 $ 15: 6 down minus 350
$     across[17] = across[25] * across[23],       $ 17: 25 across times 23 across
$     exists i : number . i**2 = across[20],      $ 20: A square number
$     [ across[23] % i != 0                       $ 23: A prime number
$     | i : number
$     , i >= 2
$     , i**2 <= across[23]
$     ],
$     exists i : number . i**2 = across[24],      $ 24: A square number
$     across[25] = across[20] / 17,               $ 25: 20 across divided by seventeen
$     across[27] = down[6] / 4,                   $ 27: 6 down divided by four
$     across[28] = 4 * 12,                        $ 28: Four dozen
$     across[29] = 7 * 144,                       $ 29: Seven gross
$     across[30] = down[22] + 450                 $ 30: 22 down plus 450
$
$
$ $ hints -- down
$ such that
$     down[ 1] = across[1] + 27,                  $  1: 1 across plus twenty-seven
$     down[ 2] = 5 * 12,                          $  2: Five dozen
$     down[ 3] = across[30] + 888,                $  3: 30 across plus 888
$     down[ 4] = 2 * across[17],                  $  4: Two times 17 across
$     down[ 5] = across[29] / 12,                 $  5: 29 across divided by twelve
$     down[ 6] = across[28] * across[23],         $  6: 28 across times 23 across
$     down[10] = across[10] + 4,                  $ 10: 10 across plus four
$     down[12] = 3 * across[24],                  $ 12: Three times 24 across
$     down[14] = across[13] / 16,                 $ 14: 13 across divided by sixteen
$     down[16] = down[28] * 15,                   $ 16: 28 down times fifteen
$     down[17] = across[13] - 399,                $ 17: 13 across minus 399
$     down[18] = across[29] / 18,                 $ 18: 29 across divided by eighteen
$     down[19] = down[22] - 94,                   $ 19: 22 down minus ninety-four
$     down[20] = across[20] - 9,                  $ 20: 20 across minus nine
$     down[21] = across[25] - 52,                 $ 21: 25 across minus fifty-two
$     down[22] = down[20] * 6,                    $ 22: 20 down times six
$     down[26] = 5 * across[24],                  $ 26: Five times 24 across
$     down[28] = down[21] + 27                    $ 28: 21 down plus twenty-seven
$
$
$ $ connecting digits to numbers
$ such that
$     forAll n : acrossIndex .
$         across[n] = sum (i,d) in acrossDigits[n] . (10**max([0,|acrossDigits[n]|-i])) * d,
$     forAll n : downIndex .
$         down[n] = sum (i,d) in downDigits[n] . (10**max([0,|downDigits[n]|-i])) * d
$
$
$ $ first digits are >1
$ $ this is probably implied, but having it just in case.
$ such that
$     forAll n : acrossIndex . acrossDigits[n](1) > 0,
$     forAll n : downIndex . downDigits[n](1) > 0
$
$
$ $ connecting the digits to the grid
$ such that

$
