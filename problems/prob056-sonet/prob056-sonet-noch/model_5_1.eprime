language ESSENCE' 1.0

given nnodes: int(1..)
given nrings: int(1..)
given capacity: int(1..)
given fin1: int
given demand_ExplicitR2_Occurrence:
        matrix indexed by [int(1..fin1), int(1..nnodes)] of bool
find network_ExplicitWithRepetitionR2_Flag: int(0..nrings * nrings)
find network_ExplicitWithRepetitionR2_Values_Occurrence:
        matrix indexed by [int(1..nrings * nrings), int(1..nnodes)] of bool
minimising
    sum([toInt(q8 <= network_ExplicitWithRepetitionR2_Flag) *
         sum([toInt(network_ExplicitWithRepetitionR2_Values_Occurrence[q8, q9])
                  | q9 : int(1..nnodes)])
             | q8 : int(1..nrings * nrings)])
such that
    and([or([q11 <= network_ExplicitWithRepetitionR2_Flag /\
             and([network_ExplicitWithRepetitionR2_Values_Occurrence[q11, q12]
                      | q12 : int(1..nnodes), demand_ExplicitR2_Occurrence[q10, q12]])
                 | q11 : int(1..nrings * nrings)])
             | q10 : int(1..fin1)]),
    and([q1 + 1 <= network_ExplicitWithRepetitionR2_Flag ->
         network_ExplicitWithRepetitionR2_Values_Occurrence[q1, ..] <=lex
         network_ExplicitWithRepetitionR2_Values_Occurrence[q1 + 1, ..]
             | q1 : int(1..nrings * nrings - 1)]),
    and([q2 > network_ExplicitWithRepetitionR2_Flag ->
         and([network_ExplicitWithRepetitionR2_Values_Occurrence[q2, q7] = false
                  | q7 : int(1..nnodes)])
             | q2 : int(1..nrings * nrings)]),
    nrings = network_ExplicitWithRepetitionR2_Flag,
    and([q5 <= network_ExplicitWithRepetitionR2_Flag ->
         sum([toInt(network_ExplicitWithRepetitionR2_Values_Occurrence[q5, q6])
                  | q6 : int(1..nnodes)])
         <= capacity
             | q5 : int(1..nrings * nrings)])

