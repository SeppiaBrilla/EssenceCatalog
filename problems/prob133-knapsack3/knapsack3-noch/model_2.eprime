language ESSENCE' 1.0

given n: int(1..100)
given totalWeight: int(1..1000)
given p1: int
given weights_Function1D: matrix indexed by [int(1..n)] of int(1..100)
given p2: int
given values_Function1D: matrix indexed by [int(1..n)] of int(1..100)
find picked_ExplicitVarSizeWithMarker_Marker: int(0..n)
find picked_ExplicitVarSizeWithMarker_Values:
        matrix indexed by [int(1..n)] of int(1..n)
maximising
    sum([(q2 <= picked_ExplicitVarSizeWithMarker_Marker) *
         values_Function1D[picked_ExplicitVarSizeWithMarker_Values[q2]]
             | q2 : int(1..n)])
such that
    sum([(q3 <= picked_ExplicitVarSizeWithMarker_Marker) *
         weights_Function1D[picked_ExplicitVarSizeWithMarker_Values[q3]]
             | q3 : int(1..n)])
    <= totalWeight,
    and([q1 + 1 <= picked_ExplicitVarSizeWithMarker_Marker ->
         picked_ExplicitVarSizeWithMarker_Values[q1] <
         picked_ExplicitVarSizeWithMarker_Values[q1 + 1]
             | q1 : int(1..n - 1)]),
    and([q1 > picked_ExplicitVarSizeWithMarker_Marker ->
         picked_ExplicitVarSizeWithMarker_Values[q1] = 1
             | q1 : int(1..n)]),
    1 <= picked_ExplicitVarSizeWithMarker_Marker,
    picked_ExplicitVarSizeWithMarker_Marker <= n

