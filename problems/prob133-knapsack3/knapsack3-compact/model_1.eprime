language ESSENCE' 1.0

given n: int(1..100)
given totalWeight: int(1..1000)
given fin1: int
given weights_Function1D: matrix indexed by [int(1..n)] of int(1..100)
given fin2: int
given values_Function1D: matrix indexed by [int(1..n)] of int(1..100)
find picked_Occurrence: matrix indexed by [int(1..n)] of bool
maximising sum([picked_Occurrence[i] * values_Function1D[i] | i : int(1..n)])
such that
    sum([picked_Occurrence[i] * weights_Function1D[i] | i : int(1..n)]) <=
    totalWeight,
    1 <= sum([picked_Occurrence[q1] | q1 : int(1..n)]),
    sum([picked_Occurrence[q1] | q1 : int(1..n)]) <= n

