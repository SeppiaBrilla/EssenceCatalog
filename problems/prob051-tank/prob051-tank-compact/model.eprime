language ESSENCE' 1.0

given numCargos: int(2..)
given numTanks: int(1..)
given capacities: matrix indexed by [int(1..numTanks)] of int(1..)
given neighbours_Occurrence:
        matrix indexed by [int(1..numTanks), int(1..numTanks)] of bool
given impossibleCargos_Occurrence:
        matrix indexed by [int(1..numTanks), int(0..numCargos)] of bool
given volumeToShip: matrix indexed by [int(1..numCargos)] of int(1..)
given p1: int
given incompatibilities_Explicit_Occurrence:
        matrix indexed by [int(1..p1), int(1..numCargos)] of bool
find allocation: matrix indexed by [int(1..numTanks)] of int(0..numCargos)
maximising sum([allocation[tank] = 0 | tank : int(1..numTanks)])
such that
    and([sum([capacities[tank] * (allocation[tank] = cargo)
                  | tank : int(1..numTanks)])
         >= volumeToShip[cargo]
             | cargo : int(1..numCargos)]),
    and([!impossibleCargos_Occurrence[tank, allocation[tank]] /\
         and([!or([and([or([[allocation[tank], allocation[neighbour]; int(1..2)][q3] = q1
                                | q3 : int(1..2)])
                            | q1 : int(1..numCargos), incompatibilities_Explicit_Occurrence[q2, q1]])
                   /\
                   and([incompatibilities_Explicit_Occurrence[q2,
                                                              [allocation[tank], allocation[neighbour]; int(1..2)][q4]]
                            | q4 : int(1..2)])
                       | q2 : int(1..p1)])
                  | neighbour : int(1..numTanks), neighbours_Occurrence[tank, neighbour]])
             | tank : int(1..numTanks)])

