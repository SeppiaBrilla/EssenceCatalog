language ESSENCE' 1.0

given nbSizes: int(1..)
letting container_size be sum([1 | i : int(1..nbSizes)])
where sum([s ** 2 | s : int(1..nbSizes)]) = container_size ** 2
letting let1 be container_size - 1
find x_Function1D: matrix indexed by [int(1..nbSizes)] of int(0..let1)
letting let2 be container_size - 1
find y_Function1D: matrix indexed by [int(1..nbSizes)] of int(0..let2)
such that
    and([x_Function1D[s] + s < container_size /\
         y_Function1D[s] + s < container_size
             | s : int(1..nbSizes)]),
    and([max([[x_Function1D[s1], x_Function1D[s2]; int(1..2)][q5] | q5 : int(1..2)])
         -
         min([[x_Function1D[s1] + s1, x_Function1D[s2] + s2; int(1..2)][q8]
                  | q8 : int(1..2)])
         >= 0
         \/
         max([[y_Function1D[s1], y_Function1D[s2]; int(1..2)][q11] | q11 : int(1..2)]) -
         min([[y_Function1D[s1] + s1, y_Function1D[s2] + s2; int(1..2)][q14]
                  | q14 : int(1..2)])
         >= 0
             | s1 : int(1..nbSizes), s2 : int(1..nbSizes), s1 != s2])

