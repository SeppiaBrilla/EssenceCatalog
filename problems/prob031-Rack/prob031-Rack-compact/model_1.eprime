language ESSENCE' 1.0

given n_models: int(1..5000)
given n_types: int(1..5000)
given n_cards: int(1..5000)
given n_racks: int(1..5000)
given fin1: int
given max_power_Function1D: matrix indexed by [int(1..n_models)] of int(1..5000)
given fin2: int
given max_connects_Function1D:
        matrix indexed by [int(1..n_models)] of int(1..5000)
given fin3: int
given price_Function1D: matrix indexed by [int(1..n_models)] of int(1..5000)
given fin4: int
given req_power_Function1D: matrix indexed by [int(1..n_types)] of int(1..5000)
given fin5: int
given ctype_Function1D: matrix indexed by [int(1..n_cards)] of int(1..n_types)
find model_Function1DPartial_Flags: matrix indexed by [int(1..n_racks)] of bool
find model_Function1DPartial_Values:
        matrix indexed by [int(1..n_racks)] of int(1..n_models)
find plugged_Function1DPartialR2_Flags:
        matrix indexed by [int(1..n_racks)] of bool
find plugged_Function1DPartialR2_Values_Occurrence:
        matrix indexed by [int(1..n_racks), int(1..n_cards)] of bool
minimising
    sum([toInt(model_Function1DPartial_Flags[q10]) *
         price_Function1D[model_Function1DPartial_Values[q10]]
             | q10 : int(1..n_racks)])
such that
    and([model_Function1DPartial_Flags[q10] -> model_Function1DPartial_Flags[q10]
             | q10 : int(1..n_racks)]),
    and([or([model_Function1DPartial_Flags[q13] /\
             or([plugged_Function1DPartialR2_Values_Occurrence[q13, q11] /\
                 plugged_Function1DPartialR2_Flags[q13]
                 /\ q11 = c
                     | q11 : int(1..n_cards)])
                 | q13 : int(1..n_racks)])
             | c : int(1..n_cards)]),
    and([model_Function1DPartial_Flags[q16] /\ model_Function1DPartial_Flags[q18] ->
         sum([toInt(and([plugged_Function1DPartialR2_Values_Occurrence[q16, q14],
                         plugged_Function1DPartialR2_Values_Occurrence[q18, q14],
                         plugged_Function1DPartialR2_Flags[q16],
                         plugged_Function1DPartialR2_Flags[q18]; int(1..4)]))
                  | q14 : int(1..n_cards)])
         = 0 | q16 : int(1..n_racks), q18 : int(1..n_racks), q16 != q18]),
    and([model_Function1DPartial_Flags[q20] ->
         sum([toInt(plugged_Function1DPartialR2_Values_Occurrence[q20, c] /\
                    plugged_Function1DPartialR2_Flags[q20])
              * req_power_Function1D[ctype_Function1D[c]]
                  | c : int(1..n_cards)])
         <= max_power_Function1D[model_Function1DPartial_Values[q20]]
         /\ model_Function1DPartial_Flags[q20]
             | q20 : int(1..n_racks)]),
    and([model_Function1DPartial_Flags[q23] ->
         sum([toInt(plugged_Function1DPartialR2_Values_Occurrence[q23, q21] /\
                    plugged_Function1DPartialR2_Flags[q23])
                  | q21 : int(1..n_cards)])
         <= max_connects_Function1D[model_Function1DPartial_Values[q23]]
         /\ model_Function1DPartial_Flags[q23]
             | q23 : int(1..n_racks)]),
    and([model_Function1DPartial_Flags[q1] = false ->
         model_Function1DPartial_Values[q1] = 1
             | q1 : int(1..n_racks)]),
    and([plugged_Function1DPartialR2_Flags[q4] = false ->
         and([plugged_Function1DPartialR2_Values_Occurrence[q4, q8] = false
                  | q8 : int(1..n_cards)])
             | q4 : int(1..n_racks)])

