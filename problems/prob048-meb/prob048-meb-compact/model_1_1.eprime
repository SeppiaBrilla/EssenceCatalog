language ESSENCE' 1.0

given numNodes: int(1..)
given maxPower: int(1..)
given initialNode: int(1..)
given linkCosts:
        matrix indexed by [int(1..numNodes), int(1..numNodes)] of int(0..maxPower)
find nodeBroadcastPower:
        matrix indexed by [int(1..numNodes)] of int(0..maxPower)
find directChildrenMatrix_Occurrence:
        matrix indexed by [int(1..numNodes), int(1..numNodes)] of bool
find totalChildrenMatrix_Occurrence:
        matrix indexed by [int(1..numNodes), int(1..numNodes)] of bool
minimising sum([nodeBroadcastPower[i] | i : int(1..numNodes)])
such that
    and([i = j \/
         sum([directChildrenMatrix_Occurrence[i, q6] /\
              directChildrenMatrix_Occurrence[j, q6]
                  | q6 : int(1..numNodes)])
         = 0 | i : int(1..numNodes), j : int(1..numNodes)]),
    sum([totalChildrenMatrix_Occurrence[initialNode, q7] | q7 : int(1..numNodes)]) =
    numNodes,
    and([totalChildrenMatrix_Occurrence[node, node] /\
         sum([directChildrenMatrix_Occurrence[node, i] *
              sum([totalChildrenMatrix_Occurrence[i, q8] | q8 : int(1..numNodes)])
                  | i : int(1..numNodes)])
         = sum([totalChildrenMatrix_Occurrence[node, q9] | q9 : int(1..numNodes)]) - 1
         /\
         and([directChildrenMatrix_Occurrence[node, childNode] ->
              and([totalChildrenMatrix_Occurrence[childNode, q10] ->
                   totalChildrenMatrix_Occurrence[node, q10]
                       | q10 : int(1..numNodes)])
              /\ linkCosts[node, childNode] != 0
              /\ nodeBroadcastPower[node] >= linkCosts[node, childNode]
                  | childNode : int(1..numNodes)])
             | node : int(1..numNodes)])

