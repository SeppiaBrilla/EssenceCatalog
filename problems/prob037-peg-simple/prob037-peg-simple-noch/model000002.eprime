language ESSENCE' 1.0

letting numPegs be 32
letting maxSteps be 31
given hole_1: int(0..6)
given hole_2: int(0..6)
given end_1: int(0..6)
given end_2: int(0..6)
find steps_Function1D_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(0..maxSteps), int(1..32)] of bool
find steps_Function1D_ExplicitVarSizeWithFlags_Values_1: matrix indexed by [int(0..maxSteps), int(1..32)] of int(0..6)
find steps_Function1D_ExplicitVarSizeWithFlags_Values_2: matrix indexed by [int(0..maxSteps), int(1..32)] of int(0..6)
such that
    and([and([or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[0, q4] /\
                  (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[0, q4] = i /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[0, q4] = j)
                      | q4 : int(1..32)])
                  | j : int(2..4), !(i = hole_1 /\ j = hole_2)])
             | i : int(0..6)]),
    and([and([or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[0, q5] /\
                  (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[0, q5] = i /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[0, q5] = j)
                      | q5 : int(1..32)])
                  | j : int(0..1)])
             | i : int(2..4)]),
    and([and([or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[0, q6] /\
                  (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[0, q6] = i /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[0, q6] = j)
                      | q6 : int(1..32)])
                  | j : int(5..6)])
             | i : int(2..4)]),
    and([steps_Function1D_ExplicitVarSizeWithFlags_Flags[31, q7] ->
         end_1 = steps_Function1D_ExplicitVarSizeWithFlags_Values_1[31, q7] /\ end_2 = steps_Function1D_ExplicitVarSizeWithFlags_Values_2[31, q7]
             | q7 : int(1..32)]),
    or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[31, q10] /\
        (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[31, q10] = end_1 /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[31, q10] = end_2)
            | q10 : int(1..32)]),
    and([sum([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i, q11] * 1 | q11 : int(1..32)]) = numPegs - i /\
         sum([(steps_Function1D_ExplicitVarSizeWithFlags_Flags[i, q12] /\
               or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i + 1, q13] /\
                   (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i + 1, q13] = steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i, q12] /\
                    steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i + 1, q13] = steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i, q12])
                       | q13 : int(1..32)]))
              * 1 | q12 : int(1..32)])
         = sum([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i, q14] * 1 | q14 : int(1..32)]) - 2
             | i : int(0..maxSteps - 1)]),
    and([or([or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i, q15] /\
                 (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i, q15] = fro_1 /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i, q15] = fro_2)
                     | q15 : int(1..32)])
             /\
             !or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i + 1, q16] /\
                  (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i + 1, q16] = fro_1 /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i + 1, q16] = fro_2)
                      | q16 : int(1..32)])
             /\
             or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i + 1, q17] /\
                 (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i + 1, q17] = to_1 /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i + 1, q17] = to_2)
                     | q17 : int(1..32)])
             /\
             !or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i, q18] /\
                  (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i, q18] = to_1 /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i, q18] = to_2)
                      | q18 : int(1..32)])
             /\ (to_1 < 2 \/ to_1 > 4 -> to_2 >= 2 \/ to_2 <= 4)
             /\ (to_2 < 2 \/ to_2 > 4 -> to_1 >= 2 \/ to_1 <= 4)
             /\
             or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i, q19] /\
                 (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i, q19] = fro_1 + (to_1 - fro_1) / 2 /\
                  steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i, q19] = fro_2 + (to_2 - fro_2) / 2)
                     | q19 : int(1..32)])
             /\
             !or([steps_Function1D_ExplicitVarSizeWithFlags_Flags[i + 1, q20] /\
                  (steps_Function1D_ExplicitVarSizeWithFlags_Values_1[i + 1, q20] = fro_1 + (to_1 - fro_1) / 2 /\
                   steps_Function1D_ExplicitVarSizeWithFlags_Values_2[i + 1, q20] = fro_2 + (to_2 - fro_2) / 2)
                      | q20 : int(1..32)])
                 | fro_1 : int(0..6), fro_2 : int(0..6), to_1 : int(0..6), to_2 : int(0..6)])
             | i : int(0..maxSteps - 1)]),
    and([and([steps_Function1D_ExplicitVarSizeWithFlags_Flags[q1, q2 + 1] ->
              steps_Function1D_ExplicitVarSizeWithFlags_Values_1[q1, q2] < steps_Function1D_ExplicitVarSizeWithFlags_Values_1[q1, q2 + 1] \/
              steps_Function1D_ExplicitVarSizeWithFlags_Values_1[q1, q2] = steps_Function1D_ExplicitVarSizeWithFlags_Values_1[q1, q2 + 1] /\
              steps_Function1D_ExplicitVarSizeWithFlags_Values_2[q1, q2] < steps_Function1D_ExplicitVarSizeWithFlags_Values_2[q1, q2 + 1]
                  | q2 : int(1..31)])
             | q1 : int(0..maxSteps)]),
    and([and([steps_Function1D_ExplicitVarSizeWithFlags_Flags[q1, q2] = false ->
              steps_Function1D_ExplicitVarSizeWithFlags_Values_1[q1, q2] = 0 /\ steps_Function1D_ExplicitVarSizeWithFlags_Values_2[q1, q2] = 0
                  | q2 : int(1..32)])
             | q1 : int(0..maxSteps)]),
    and([and([steps_Function1D_ExplicitVarSizeWithFlags_Flags[q1, q2 + 1] -> steps_Function1D_ExplicitVarSizeWithFlags_Flags[q1, q2] | q2 : int(1..31)])
             | q1 : int(0..maxSteps)]),
    and([1 <= sum([steps_Function1D_ExplicitVarSizeWithFlags_Flags[q1, q2] | q2 : int(1..32)]) | q1 : int(0..maxSteps)]),
    and([sum([steps_Function1D_ExplicitVarSizeWithFlags_Flags[q1, q2] | q2 : int(1..32)]) <= 32 | q1 : int(0..maxSteps)])

$ Conjure's
$ {"finds": ["steps"],
$  "givens": ["hole", "end"],
$  "enumGivens": [],
$  "enumLettings": [],
$  "unnameds": [],
$  "trailCompact": [[1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24]],
$                   [2, [1, 2]], [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9]], [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7]], [1, [1]], [1, [1, 2, 3, 4, 5, 6]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5]], [1, [1]], [1, [1, 2, 3, 4]], [1, [1]],
$                   [1, [1, 2, 3]], [1, [1]], [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29, 30, 31, 32]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29, 30, 31]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29, 30]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28, 29]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27, 28]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26, 27]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25, 26]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24, 25]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23, 24]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
$                     23]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
$                     22]],
$                   [1, [1]],
$                   [1,
$                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]],
$                   [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]],
$                   [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9]], [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7]], [1, [1]], [1, [1, 2, 3, 4, 5, 6]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5]], [1, [1]], [1, [1, 2, 3, 4]], [1, [1]],
$                   [1, [1, 2, 3]], [1, [1]], [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1, 2, 3, 4, 5, 6]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1, 2, 3, 4, 5]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1, 2, 3, 4]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1]], [1, [1]], [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]], [1, [1, 2]],
$                   [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [1, [1]],
$                   [1, [1, 2, 3, 4, 5, 6, 7, 8, 9]], [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7, 8]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5, 6, 7]], [1, [1]], [1, [1, 2, 3, 4, 5, 6]],
$                   [1, [1]], [1, [1, 2, 3, 4, 5]], [1, [1]], [1, [1, 2, 3, 4]], [1, [1]],
$                   [1, [1, 2, 3]], [1, [1]], [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]],
$                   [1, [1, 2]], [1, [1]], [1, [1, 2, 3, 4]], [1, [1]], [1, [1, 2, 3]], [1, [1]],
$                   [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]], [1, [1, 2, 3]], [1, [1]],
$                   [1, [1, 2]], [1, [1]], [1, [1]], [1, [1]]],
$  "trailVerbose": [],
$  "representations": [["steps",
$                       {"DomainFunction": [{"HasRepresentation": "Function1D"},
$                                           [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                            {"Reference": ["maxSteps",
$                                                                                           {"Alias": {"Constant": {"ConstantInt": 31}}}]}]}]},
$                                           {"DomainSet": [{"HasRepresentation": "ExplicitVarSizeWithFlags"},
$                                                          {"SizeAttr_MinMaxSize": [{"Constant": {"ConstantInt": 1}},
$                                                                                   {"Constant": {"ConstantInt": 32}}]},
$                                                          {"DomainTuple": [{"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                                            {"Constant": {"ConstantInt": 6}}]}]},
$                                                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                                                            {"Constant": {"ConstantInt": 6}}]}]}]}]}]}],
$                      ["hole",
$                       {"DomainTuple": [{"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                         {"Constant": {"ConstantInt": 6}}]}]},
$                                        {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                         {"Constant": {"ConstantInt": 6}}]}]}]}],
$                      ["end",
$                       {"DomainTuple": [{"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                         {"Constant": {"ConstantInt": 6}}]}]},
$                                        {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                         {"Constant": {"ConstantInt": 6}}]}]}]}]],
$  "originalDomains": [["hole",
$                       {"DomainTuple": [{"DomainReference": ["Dom", null]},
$                                        {"DomainReference": ["Dom", null]}]}],
$                      ["end",
$                       {"DomainTuple": [{"DomainReference": ["Dom", null]},
$                                        {"DomainReference": ["Dom", null]}]}],
$                      ["steps",
$                       {"DomainFunction": [[],
$                                           [{"SizeAttr_None": []}, "PartialityAttr_Total", "JectivityAttr_None"],
$                                           {"DomainInt": [{"RangeBounded": [{"Constant": {"ConstantInt": 0}},
$                                                                            {"Reference": ["maxSteps", null]}]}]},
$                                           {"DomainSet": [[],
$                                                          {"SizeAttr_MinMaxSize": [{"Constant": {"ConstantInt": 1}},
$                                                                                   {"Constant": {"ConstantInt": 32}}]},
$                                                          {"DomainTuple": [{"DomainReference": ["Dom", null]},
$                                                                           {"DomainReference": ["Dom", null]}]}]}]}]]}