language ESSENCE' 1.0

given n_upper: int
given deck_width: int(1..)
given deck_length: int(1..)
given n_containers: int(1..)
given n_classes: int(1..)
given p1: int
given width_Function1D:
        matrix indexed by [int(1..n_containers)] of int(1..deck_width)
given p2: int
given length_Function1D:
        matrix indexed by [int(1..n_containers)] of int(1..deck_length)
given p3: int
given class_Function1D:
        matrix indexed by [int(1..n_containers)] of int(1..n_classes)
given p4: int
given separation_FunctionAsRelation_RelationAsSet_Explicit_1_Occurrence:
        matrix indexed by [int(1..p4), int(1..n_classes)] of bool
given separation_FunctionAsRelation_RelationAsSet_Explicit_2:
        matrix indexed by [int(1..p4)] of int(0..n_upper)
find west_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_width)
find east_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_width)
find north_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_length)
find south_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_length)
such that
    and([east_Function1D[c] - west_Function1D[c] = width_Function1D[c] /\
         south_Function1D[c] - north_Function1D[c] = length_Function1D[c]
         \/
         east_Function1D[c] - west_Function1D[c] = length_Function1D[c] /\
         south_Function1D[c] - north_Function1D[c] = width_Function1D[c]
             | c : int(1..n_containers)]),
    and([c1 != c2 ->
         west_Function1D[c1] != west_Function1D[c2] \/
         north_Function1D[c1] != north_Function1D[c2]
             | c1 : int(1..n_containers), c2 : int(1..n_containers)]),
    and([c1 != c2 ->
         max([[west_Function1D[c1], west_Function1D[c2]; int(1..2)][q1]
                  | q1 : int(1..2)])
         -
         min([[east_Function1D[c1], east_Function1D[c2]; int(1..2)][q4]
                  | q4 : int(1..2)])
         >= 0
         \/
         max([[north_Function1D[c1], north_Function1D[c2]; int(1..2)][q5]
                  | q5 : int(1..2)])
         -
         min([[south_Function1D[c1], south_Function1D[c2]; int(1..2)][q6]
                  | q6 : int(1..2)])
         >= 0
             | c1 : int(1..n_containers), c2 : int(1..n_containers)]),
    and([c1 != c2 ->
         or([and([or([[class_Function1D[c1], class_Function1D[c2]; int(1..2)][q8] = q7
                          | q8 : int(1..2)])
                      | q7 : int(1..n_classes),
                        separation_FunctionAsRelation_RelationAsSet_Explicit_1_Occurrence[q2, q7]])
             /\
             and([separation_FunctionAsRelation_RelationAsSet_Explicit_1_Occurrence[q2,
                                                                                    [class_Function1D[c1],
                                                                                     class_Function1D[c2]; int(1..2)][q9]]
                      | q9 : int(1..2)])
             /\
             separation_FunctionAsRelation_RelationAsSet_Explicit_2[q2] <=
             max([[west_Function1D[c1], west_Function1D[c2]; int(1..2)][q10]
                      | q10 : int(1..2)])
             -
             min([[east_Function1D[c1], east_Function1D[c2]; int(1..2)][q11]
                      | q11 : int(1..2)])
                 | q2 : int(1..p4)])
         \/
         or([and([or([[class_Function1D[c1], class_Function1D[c2]; int(1..2)][q13] = q12
                          | q13 : int(1..2)])
                      | q12 : int(1..n_classes),
                        separation_FunctionAsRelation_RelationAsSet_Explicit_1_Occurrence[q3, q12]])
             /\
             and([separation_FunctionAsRelation_RelationAsSet_Explicit_1_Occurrence[q3,
                                                                                    [class_Function1D[c1],
                                                                                     class_Function1D[c2]; int(1..2)][q14]]
                      | q14 : int(1..2)])
             /\
             separation_FunctionAsRelation_RelationAsSet_Explicit_2[q3] <=
             max([[north_Function1D[c1], north_Function1D[c2]; int(1..2)][q15]
                      | q15 : int(1..2)])
             -
             min([[south_Function1D[c1], south_Function1D[c2]; int(1..2)][q16]
                      | q16 : int(1..2)])
                 | q3 : int(1..p4)])
             | c1 : int(1..n_containers), c2 : int(1..n_containers)])

