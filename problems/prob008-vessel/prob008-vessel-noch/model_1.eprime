language ESSENCE' 1.0

given n_upper: int
given deck_width: int(1..)
given deck_length: int(1..)
given n_containers: int(1..)
given n_classes: int(1..)
given fin1: int
given width_Function1D:
        matrix indexed by [int(1..n_containers)] of int(1..deck_width)
given fin2: int
given length_Function1D:
        matrix indexed by [int(1..n_containers)] of int(1..deck_length)
given fin3: int
given class_Function1D:
        matrix indexed by [int(1..n_containers)] of int(1..n_classes)
given fin4: int
given separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_1_Occurrence:
        matrix indexed by [int(1..fin4), int(1..n_classes)] of bool
given separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_2:
        matrix indexed by [int(1..fin4)] of int(0..n_upper)
find west_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_width)
find east_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_width)
find north_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_length)
find south_Function1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_length)
such that
    and([east_Function1D[c] - west_Function1D[c] = width_Function1D[c] /\
         south_Function1D[c] - north_Function1D[c] = length_Function1D[c]
         \/
         east_Function1D[c] - west_Function1D[c] = length_Function1D[c] /\
         south_Function1D[c] - north_Function1D[c] = width_Function1D[c]
             | c : int(1..n_containers)]),
    and([c1 != c2 ->
         west_Function1D[c1] != west_Function1D[c2] \/
         north_Function1D[c1] != north_Function1D[c2]
             | c1 : int(1..n_containers), c2 : int(1..n_containers)]),
    and([c1 != c2 ->
         max([west_Function1D[c1], west_Function1D[c2]; int(1..2)]) -
         min([east_Function1D[c1], east_Function1D[c2]; int(1..2)])
         >= 0
         \/
         max([north_Function1D[c1], north_Function1D[c2]; int(1..2)]) -
         min([south_Function1D[c1], south_Function1D[c2]; int(1..2)])
         >= 0
             | c1 : int(1..n_containers), c2 : int(1..n_containers)]),
    and([c1 != c2 ->
         or([and([class_Function1D[c1] = q19 \/ class_Function1D[c2] = q19
                      | q19 : int(1..n_classes),
                        separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_1_Occurrence[q14,
                                                                                                q19]])
             /\
             (separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_1_Occurrence[q14,
                                                                                      class_Function1D[c1]]
              /\
              separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_1_Occurrence[q14,
                                                                                      class_Function1D[c2]])
             /\
             separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_2[q14] <=
             max([west_Function1D[c1], west_Function1D[c2]; int(1..2)]) -
             min([east_Function1D[c1], east_Function1D[c2]; int(1..2)])
                 | q14 : int(1..fin4)])
         \/
         or([and([class_Function1D[c1] = q30 \/ class_Function1D[c2] = q30
                      | q30 : int(1..n_classes),
                        separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_1_Occurrence[q25,
                                                                                                q30]])
             /\
             (separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_1_Occurrence[q25,
                                                                                      class_Function1D[c1]]
              /\
              separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_1_Occurrence[q25,
                                                                                      class_Function1D[c2]])
             /\
             separation_FunctionAsRelationR2_RelationAsSetR2_ExplicitR2_2[q25] <=
             max([north_Function1D[c1], north_Function1D[c2]; int(1..2)]) -
             min([south_Function1D[c1], south_Function1D[c2]; int(1..2)])
                 | q25 : int(1..fin4)])
             | c1 : int(1..n_containers), c2 : int(1..n_containers)])

