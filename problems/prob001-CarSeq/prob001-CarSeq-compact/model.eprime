language ESSENCE' 1.0

given n_cars: int(1..)
given n_classes: int(1..)
given n_options: int(1..)
given n_upperBound: int(1..)
given fin1: int
given quantity_Function1D:
        matrix indexed by [int(1..n_classes)] of int(1..n_upperBound)
given fin2: int
given maxcars_Function1D:
        matrix indexed by [int(1..n_options)] of int(1..n_upperBound)
given fin3: int
given blksize_Function1D:
        matrix indexed by [int(1..n_options)] of int(1..n_upperBound)
given fin4: int
given usage_RelationAsMatrix:
        matrix indexed by [int(1..n_classes), int(1..n_options)] of bool
find car_Function1D: matrix indexed by [int(1..n_cars)] of int(1..n_classes)
such that
    and([sum([car_Function1D[q4] = c | q4 : int(1..n_cars)]) =
         quantity_Function1D[c]
             | c : int(1..n_classes)]),
    and([and([sum([usage_RelationAsMatrix[car_Function1D[i], opt]
                       | i : int(s..s + blksize_Function1D[opt] - 1)])
              <= maxcars_Function1D[opt]
                  | s : int(1..n_cars + 1 - blksize_Function1D[opt])])
             | opt : int(1..n_options)])

